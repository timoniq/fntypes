import typing

from fntypes.library.monad.result import Result

class Variative[*Ts]:
    __match_args__: typing.ClassVar[tuple[typing.Literal["_value"]]]
    _value: typing.Any
    def __new__[T](cls: type[Variative[*tuple[T, ...]]], value: T, /) -> Variative[*Ts]: ...
    def __getitem__[T](self, __type: type[T]) -> Result[T, str]: ...
    @property
    def v[T](self: Variative[*tuple[T, ...]]) -> T: ...
    @staticmethod
    def get_args() -> tuple[typing.Any, ...]: ...
    @typing.overload
    def only[T, P](self: Variative[T, *tuple[P, ...]]) -> Result[T, str]: ...
    @typing.overload
    def only[T](self, t: type[T]) -> Result[T, str]:
        # Probably there is not way for a better typing until T cannot be bound to Ts or intersection typehint is implemented
        ...
    def detach[Head, *Tail](self: Variative[Head, *Tail]) -> Result[Variative[*Tail], str]: ...
